generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  TODO
  DOING
  DONE
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  emailVerified String?
  image         String?
  createdAt     DateTime @default(now())
  mood          String?  @db.VarChar(100)

  Account  Account[]
  Session  Session[]
  adminFor Group[]   @relation("admin")
  groups   Group[]
  tasks    Task[]
  tags     Tags[]
}

// ----------------------------------------------------
// AUTH Models

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ----------------------------------------------------

model Task {
  id        String    @id @default(uuid())
  title     String
  status    Status    @default(DOING)
  comments  Comment[]
  tags      Tags[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  dueAt     DateTime

  ownerId String // User who created the task
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  groupId Int // Group in which the task belongs
  group   Group @relation(fields: [groupId], references: [id])
}

model Comment {
  id   String @id @default(uuid())
  body String

  Task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String?
}

model Tags {
  id   String @id @default(uuid())
  name String @unique

  Task    Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId  String?
  owner   User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  @@unique([name, ownerId])
}

model Group {
  id         Int     @id @default(autoincrement())
  name       String
  adminId    String
  admin      User    @relation("admin", fields: [adminId], references: [id])
  inviteCode String? @unique

  Task    Task[]
  members User[]
}
